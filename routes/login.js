var express = require('express');
var router = express.Router();

// Include Parse
var Parse = require('parse/node');
Parse.initialize(process.env.PARSE_APP_ID, process.env.PARSE_JS_KEY);
Parse.User.enableUnsafeCurrentUser();

/* GET logged in user. */
router.get('/', function(req, res, next) {
  
  // Get the presence cookie that we made to determine if they are logged in
  var loggedIn = req.cookies['presence'];
  
  // If the user has not logged in yet, tell them
  if (!loggedIn) {
    res.render('login', {
      error: 'No user logged in',
      message: 'you have cookie: ' + req.cookies['presence']
    });
    return;
  }
  
  // Sets the Parse.User to the user that made the request.
  // The cookie 'presence' is the session token generated by
  // Parse.signUp() or Parse.logIn()
  Parse.User.become(req.cookies['presence']).then(function (user) {
    // The current user is now set to user.

    // user.getSessionToken() matches the cookie in the browser
    // console.log("Session token: " + user.getSessionToken());
    res.render('login', {
      action: 'Logged in',
      username: user.getUsername(),
      message: 'you have cookie: ' + req.cookies['presence']
    });

  }, function (error) {
    // The token could not be validated.
    logError(error);
    res.render('login', {
      error: 'No user logged in',
      message: 'you have cookie: ' + req.cookies['presence']
    });
  });
});

/* POST logging in user. */
router.post('/', function(req, res, next) { 

  // Creates a new entry if they are signing up. Logs them in otherwise.
  if (req.body.newUser) {    
    // Creates a new User in the Parse database
    var user = new Parse.User();
    user.set("username", req.body.email);
    user.set("password", req.body.password);
    user.set("email", req.body.email);
    
    // Makes it so only this user can edit their data (as if anyone else could)
    // Access Control List == ACL
    var aclKey = new Parse.ACL();
    aclKey.setPublicReadAccess(false);
    aclKey.setPublicWriteAccess(false);
    user.setACL(aclKey);
    
    user.signUp(null, {
      success: function(user) {
        // Hooray! Let them use the app now.
        
        // Sets a user session cookie to expire in 30 days
        // The Parse.Session is automatically created and linked to this user
        res.cookie('presence', user.getSessionToken(), { maxAge: 2592000000 });
        res.render('login', {
          action: 'Signed up',
          username: user.getUsername(),
          message: 'you have cookie: ' + req.cookies['presence']
        });
        
      },
      error: function(user, error) {
        // Show the error message somewhere and let the user try again.
        logError(error);
        res.render('login', {
          error: "Could not sign-up " + user.getUsername() + " because "
                  + error.message,
          message: 'you have cookie: ' + req.cookies['presence']
        });
      }
    });
  }
  
  else {
    
    Parse.User.logIn(req.body.email, req.body.password, {
      success: function(user) {
        // Do stuff after successful login.
        
        // Sets a user session cookie to expire in 30 days
        // The Parse.Session is automatically created and linked to this user
        res.cookie('presence', user.getSessionToken(), { maxAge: 2592000000 });
        res.render('login', {
          action: 'Logged in',
          username: user.getUsername(),
          message: 'you have cookie: ' + user.getSessionToken()
        });
      },
      error: function(user, error) {
        // The login failed. Check error to see why.
        logError(error);
        res.render('login', {
          error: "Could not login " + user.getUsername() + " because "
                  + error.message,
          message: 'you have cookie: ' + req.cookies['presence']
        });
      }
    });
  }
});

// Logs the error message in the console
function logError(error) {
  console.log("ERROR");
  console.log("error code: " + error.code);
  console.log("message: " + error.message);
}

module.exports = router;